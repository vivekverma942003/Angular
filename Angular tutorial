Inside the angular class we can not declare a variable we have to use the properties and if you wants to declare a variable 
then create a function inside the  class then create the variable 

export class Appcomponent{
title="this is the title"
this is the property

hello(){
let x=10; this is the variable
}
}


Hook	Triggered When?	Purpose
ngOnChanges()	On every change to @Input() bound properties	Respond to changes in inputs from the parent component
ngOnInit()	Once after the first ngOnChanges()	Run initialization logic (e.g. fetch data, setup variables)
ngDoCheck()	On every change detection cycle	Custom change detection (advanced, rarely used)
ngAfterContentInit()	Once after content (like <ng-content>) is projected into the component	Used when working with ng-content projections
ngAfterContentChecked()	After every check of projected content	Detect changes in projected content
ngAfterViewInit()	Once after the component‚Äôs view and child views are initialized	Used to interact with @ViewChild, DOM, or child components
ngAfterViewChecked()	After every check of the component's view and child views	Track and react to changes in the component's view
ngOnDestroy()	Just before the component is destroyed	Cleanup: unsubscribe, stop intervals, detach DOM listeners, etc.











Files and folders in angular :-
package.json :- all the details of the project like version and dependencies 
Dev dependencies are run only in the development building and testing the application 
but Dependency will need to run during the production 
‚úÖ Yes! dependencies ARE needed during development.
They are used both in development AND in production because they are core to your app's functionality.
During production, devDependencies are not needed.



Interpolation in Angular :- The interpolation is used to show the js code in the html file and and to access 
the variables and properties from the typescript file {{}} this is used for the interpolation.






Questions :- can we define multiple template urls in the same typescript file 
 how can we pass one component to multiple component in the angular js


Related Topics :- Injectable,Subscriber , Pipes , observable ,    .pipe(debounceTime(300)),  RxJS Observables.,

*******************************************************************************************************************************************************************************************************
üîç What is ngOnInit?
ngOnInit is a lifecycle hook in Angular that is called once after the component's constructor and after Angular has initialized all data-bound properties.
It's mainly used for:
‚úÖ Fetching data from APIs
‚úÖ Initializing values
‚úÖ Setting up logic dependent on @Input() data
ngOnInit() is used when you want to execute something as soon as the component is initialized, which typically happens when the webpage (or that part of the page) loads.

*******************************************************************************************************************************************************************************************************

 Use ngOnChanges() when:
You are receiving a value from a parent component via @Input()
And you want to perform an action (like API call) every time that value changes

üîÑ Why ngOnChanges()?
ngOnInit() runs only once ‚Üí when the component initializes
ngOnChanges() runs every time an @Input() value changes
‚úÖ Purpose of ngOnChanges in Angular
üëâ ngOnChanges() is used when:
A component receives data dynamically via @Input() (from a parent).
You want to react every time that input data changes.
It allows you to trigger logic (like API calls, re-calculations, filtering, etc.) based on those changes.
so the ngOnchanges will work only for the data changes where we passes the data from parents to child 
*******************************************************************************************************************************************************************************************************



‚úÖ When Passing Data from Child ‚û°Ô∏è Parent, we use:
üîÑ @Output() and EventEmitter
*******************************************************************************************************************************************************************************************************

‚úÖ What is ngOnDestroy()?
ngOnDestroy() is a lifecycle hook in Angular that runs just before the component is destroyed or removed from the DOM.
You only need ngOnDestroy() when you‚Äôre doing something that must be cleaned up when the component is destroyed.

Scenario	Why you need ngOnDestroy()
Subscribed to an observable manually	Prevent memory leaks (unsubscribe())
Created setInterval or setTimeout	Prevent background code from running
Using a WebSocket	Close the connection cleanly
Added global DOM event listeners	Remove them to avoid leaks
Connected to a 3rd-party library	Tear down or disconnect it properly



*******************************************************************************************************************************************************************************************************
üß† What is ngDoCheck()?
ngDoCheck() is a lifecycle hook that is called on every change detection cycle, even if Angular doesn't detect any changes in @Input() or bound properties.
It allows you to implement custom change detection logic manually.
Angular‚Äôs default @Input() change detection is reference-based:
If an object or array is mutated (but reference doesn‚Äôt change), Angular won‚Äôt detect the change.
So, ngOnChanges() won‚Äôt trigger.
That‚Äôs where ngDoCheck() comes in!
runs on every changes and runs even when nothing has changed






























